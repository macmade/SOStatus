/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @header      ...
 * @copyright   eosgarden 2011 - Jean-David Gadina <macmade@eosgarden.com>
 * @abstract    ...
 */

#import "Application.h"

@implementation Application

- ( IBAction )cut: ( id )sender
{
    ( void )sender;
}

- ( IBAction )copy: ( id )sender
{
    ( void )sender;
}

- ( IBAction )paste: ( id )sender
{
    ( void )sender;
}

- ( IBAction )undo: ( id )sender
{
    ( void )sender;
}

- ( IBAction )selectAll: ( id )sender
{
    ( void )sender;
}

- ( IBAction )redo: ( id )sender
{
    ( void )sender;
}

- ( void )sendEvent: ( NSEvent * )event
{
	if( [ event type ] != NSKeyDown )
    {
        [ super sendEvent: event ];
        
        return;
    }
    
    if( ( [ event modifierFlags ] & NSDeviceIndependentModifierFlagsMask ) == NSCommandKeyMask )
    {
        if( [ [ event charactersIgnoringModifiers ] isEqualToString: @"x" ] )
        {
            if( [ self sendAction: @selector( cut: ) to: nil from: self ] )
            {
                return;
            }
        }
        else if( [ [ event charactersIgnoringModifiers ] isEqualToString: @"c" ] )
        {
            if( [ self sendAction: @selector( copy: ) to: nil from: self ] )
            {
                return;
            }
        }
        else if( [ [ event charactersIgnoringModifiers ] isEqualToString: @"v" ] )
        {
            if( [ self sendAction: @selector( paste: ) to: nil from: self ] )
            {
                return;
            }
        }
        else if( [ [ event charactersIgnoringModifiers ] isEqualToString: @"z" ] )
        {
            if( [ self sendAction: @selector( undo: ) to: nil from: self ] )
            {
                return;
            }
        }
        else if( [ [ event charactersIgnoringModifiers ] isEqualToString: @"a" ] )
        {
            if( [ self sendAction: @selector( selectAll: ) to: nil from: self ] )
            {
                return;
            }
        }
    }
    else if( ( [ event modifierFlags ] & NSDeviceIndependentModifierFlagsMask ) == ( NSCommandKeyMask | NSShiftKeyMask ) )
    {
        if( [ [ event charactersIgnoringModifiers ] isEqualToString: @"Z" ] )
        {
            if( [ self sendAction:@selector( redo: ) to: nil from: self ] )
            {
                return;
            }
        }
    }
    
    [ super sendEvent: event ];
}

@end
