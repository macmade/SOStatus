/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @file        ...
 * @copyright   eosgarden 2011 - Jean-David Gadina <macmade@eosgarden.com>
 * @abstract    ...
 */

/*******************************************************************************
 * COPYRIGHT NOTICE
 * 
 * This file is based on the Reachability class, by Apple Inc.
 * The original file is licensed under the terms of the Apple Public Source
 * License (APSL).
 * 
 * http://www.opensource.apple.com/license/apsl/
 ******************************************************************************/

#import <sys/socket.h>
#import <netinet/in.h>
#import <netinet6/in6.h>
#import <arpa/inet.h>
#import <ifaddrs.h>
#import <netdb.h>
#import <CoreFoundation/CoreFoundation.h>
#import "NetworkReachability.h"

NSString * const NetworkReachabilityChangedNotification      = @"NetworkReachabilityChangedNotification";
NSString * const ExceptionInvalidNetworkReachabilityInstance = @"ExceptionInvalidNetworkReachabilityInstance";

static void ReachabilityCallback( SCNetworkReachabilityRef target, SCNetworkReachabilityFlags flags, void * info );
static void ReachabilityCallback( SCNetworkReachabilityRef target, SCNetworkReachabilityFlags flags, void * info )
{
    NetworkReachability * reachability;
    
    ( void )target;
    ( void )flags;
    
    if( info == NULL || [ ( id )info class ] != [ NetworkReachability class ] )
    {
        return;
    }
    
    @autoreleasepool
    {
        reachability = ( NetworkReachability * )info;
        
        [ [ NSNotificationCenter defaultCenter ] postNotificationName: NetworkReachabilityChangedNotification object: reachability ];
    }
}

@implementation NetworkReachability

+ ( NetworkReachability * )networkReachabilityWithHostName: ( NSString * )hostName
{
    NetworkReachability    * instance;
    SCNetworkReachabilityRef reachability;
    
    reachability = SCNetworkReachabilityCreateWithName( NULL, [ hostName UTF8String ] );
	
    if( reachability != NULL )
	{
		if( ( instance = [ NetworkReachability new ] ) != nil )
        {
			instance->_reachability = reachability;
			instance->_localWiFi    = NO;
            
            return [ instance autorelease ];
		}
	}
    
    return nil;
}

+ ( NetworkReachability * )networkReachabilityWithAddress: ( const struct sockaddr_in * const )address
{
    NetworkReachability    * instance;
	SCNetworkReachabilityRef reachability;
    
    reachability = SCNetworkReachabilityCreateWithAddress( kCFAllocatorDefault, ( const struct sockaddr * )address );
	
    if( reachability != NULL )
	{
		if( ( instance = [ NetworkReachability new ] ) != nil )
        {
			instance->_reachability = reachability;
			instance->_localWiFi    = NO;
            
            return [ instance autorelease ];
		}
	}
    
	return nil;
}

+ ( NetworkReachability * )networkReachabilityForInternetConnection
{
	struct sockaddr_in address;
    
    memset( &address, 0, sizeof( struct sockaddr_in ) );
    
	address.sin_len    = sizeof( struct sockaddr_in );
	address.sin_family = AF_INET;
    
	return [ NetworkReachability networkReachabilityWithAddress: &address ];
}

+ ( NetworkReachability * )networkReachabilityForLocalWiFi
{
	struct sockaddr_in    address;
    NetworkReachability * instance;
    
    memset( &address, 0, sizeof( struct sockaddr_in ) );
    
	address.sin_len         = sizeof( struct sockaddr_in );
	address.sin_family      = AF_INET;
    address.sin_addr.s_addr = htonl( IN_LINKLOCALNETNUM );
    instance                = [ NetworkReachability networkReachabilityWithAddress: &address ];
    
	if( instance != nil )
	{
		instance->_localWiFi = YES;
	}
    
	return instance;
}

- ( BOOL )startNotifier
{
    SCNetworkReachabilityContext context;
    
	context.copyDescription = NULL;
    context.info            = self;
    context.release         = NULL;
    context.retain          = NULL;
    context.version         = 0;
    
	if( SCNetworkReachabilitySetCallback( _reachability, ReachabilityCallback, &context ) )
	{
		if( SCNetworkReachabilityScheduleWithRunLoop( _reachability, CFRunLoopGetCurrent(), kCFRunLoopDefaultMode ) )
		{
            return YES;
		}
	}
    
	return NO;
}

- ( void )stopNotifier
{
	if( _reachability != NULL )
	{
		SCNetworkReachabilityUnscheduleFromRunLoop
        (
            _reachability,
            CFRunLoopGetCurrent(),
            kCFRunLoopDefaultMode
        );
	}
}

- ( void )dealloc
{
	[ self stopNotifier ];
    
	if( _reachability != NULL )
	{
		CFRelease( _reachability );
	}
    
	[ super dealloc ];
}

- ( NetworkStatus )localWiFiStatusForFlags: ( SCNetworkReachabilityFlags )flags
{
	if( ( flags & kSCNetworkReachabilityFlagsReachable ) && ( flags & kSCNetworkReachabilityFlagsIsDirect ) )
	{
		return NetworkStatusReachableViaWiFi;	
	}
    
	return NetworkStatusNotReachable;
}

- ( NetworkStatus )networkStatusForFlags: ( SCNetworkReachabilityFlags )flags
{
	if( ( flags & kSCNetworkReachabilityFlagsReachable ) == 0 )
	{
		return NetworkStatusNotReachable;
	}
    
	if( ( flags & kSCNetworkReachabilityFlagsConnectionRequired ) == 0 )
	{
		return NetworkStatusReachableViaWiFi;	
	}
	
	
	if
    (
           ( flags & kSCNetworkReachabilityFlagsConnectionOnDemand )  != 0
        || ( flags & kSCNetworkReachabilityFlagsConnectionOnTraffic ) != 0
    )
	{
        if( ( flags & kSCNetworkReachabilityFlagsInterventionRequired ) == 0 )
        {
            return NetworkStatusReachableViaWiFi;	
        }
    }
    
	if( ( flags & kSCNetworkReachabilityFlagsIsDirect ) == kSCNetworkReachabilityFlagsIsDirect )
	{
		return NetworkStatusReachableViaWWAN;	
	}
    
    return NetworkStatusNotReachable;
}

- ( BOOL )connectionRequired
{
	SCNetworkReachabilityFlags flags;
    NSException              * e;
    
    if( _reachability == NULL )
    {
        e = [ NSException
                exceptionWithName:  ExceptionInvalidNetworkReachabilityInstance
                reason:             @"SCNetworkReachabilityRef object is NULL"
                userInfo:           nil
            ];
        
        @throw e;
    }
    
	if( SCNetworkReachabilityGetFlags( _reachability, &flags ) )
	{
		return ( flags & kSCNetworkReachabilityFlagsConnectionRequired );
	}
    
	return NO;
}

- ( NetworkStatus )currentReachabilityStatus
{
	SCNetworkReachabilityFlags flags;
    NSException              * e;
    
    if( _reachability == NULL )
    {
        e = [ NSException
                  exceptionWithName:  ExceptionInvalidNetworkReachabilityInstance
                  reason:             @"SCNetworkReachabilityRef object is NULL"
                  userInfo:           nil
            ];
        
        @throw e;
    }
    
	if( SCNetworkReachabilityGetFlags( _reachability, &flags ) )
	{
		if( _localWiFi )
		{
			return [ self localWiFiStatusForFlags: flags ];
		}
		else
		{
			return [ self networkStatusForFlags: flags ];
		}
	}
    
    return NetworkStatusNotReachable;
}

@end
