/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @file        ...
 * @copyright   eosgarden 2011 - Jean-David Gadina <macmade@eosgarden.com>
 * @abstract    ...
 */

#import "PreferencesController.h"
#import "NetworkReachability.h"
#import "SOUser.h"

NSString * const PreferencesChangedNotification = @"PreferencesChangedNotification";

@interface PreferencesController( NSTextFieldDelegate ) < NSTextFieldDelegate >



@end

@implementation PreferencesController( NSTextFieldDelegate )

- ( BOOL )control: ( NSControl * )control textShouldBeginEditing: ( NSText * )fieldEditor
{
    ( void )control;
    ( void )fieldEditor;
    
    return YES;
}

- ( BOOL )control: ( NSControl * )control textShouldEndEditing: ( NSText * )fieldEditor
{
    ( void )control;
    ( void )fieldEditor;
    
    return YES;
}


@end

@interface PreferencesController( Private )

- ( BOOL )isLoginItemEnabled;
- ( void )enableLoginItem;
- ( void )disableLoginItem;

@end

@implementation PreferencesController( Private )

- ( BOOL )isLoginItemEnabled
{
    BOOL                    found;
    UInt32                  seedValue;
    CFURLRef                path;
    LSSharedFileListRef     loginItemsRef;
    CFArrayRef              loginItems;
    id                      loginItem;
    LSSharedFileListItemRef loginItemRef;
    
    found         = NO;
    seedValue     = 0;
    path          = NULL;
    loginItemsRef = LSSharedFileListCreate( NULL, kLSSharedFileListSessionLoginItems, NULL );
    
    if( !loginItemsRef )
    {
        return NO;
    }
    
    loginItems = LSSharedFileListCopySnapshot( loginItemsRef, &seedValue );
    
    for( loginItem in ( NSArray * )loginItems )
    {    
        loginItemRef = ( LSSharedFileListItemRef )loginItem;
        
        if( LSSharedFileListItemResolve( loginItemRef, 0, ( CFURLRef * )&path, NULL ) == noErr )
        {
            if( [ [ ( NSURL * )path path ] hasPrefix: [ [ NSBundle mainBundle ] bundlePath ] ] )
            {
                CFRelease( path );
                
                found = YES;
                
                break;
            }
            
            if( path != NULL )
            {
                CFRelease( path );
            }
        }
    }
    
    if( loginItems != NULL )
    {
        CFRelease( loginItems );
    }

    return found;
}

- ( void )enableLoginItem
{
    CFURLRef                url;
    LSSharedFileListRef     loginItemsRef;
    LSSharedFileListItemRef loginItemRef;
    
    url           = ( CFURLRef )[ NSURL fileURLWithPath: [ [ NSBundle mainBundle ] bundlePath ] ];
    loginItemsRef = LSSharedFileListCreate( NULL, kLSSharedFileListSessionLoginItems, NULL );
    
    if( !loginItemsRef )
    {
        return;
    }
    
	loginItemRef = LSSharedFileListInsertItemURL( loginItemsRef, kLSSharedFileListItemLast, NULL, NULL, url, NULL, NULL );		
	
    if( loginItemRef )
    {
		CFRelease( loginItemRef );
    }
}

- ( void )disableLoginItem
{
    UInt32                  seedValue;
    CFURLRef                path;
    CFArrayRef              loginItems;
    LSSharedFileListRef     loginItemsRef;
    id                      loginItem;
    LSSharedFileListItemRef loginItemRef;
    
    path          = NULL;
    seedValue     = 0;
    loginItemsRef = LSSharedFileListCreate( NULL, kLSSharedFileListSessionLoginItems, NULL );
    
    if( !loginItemsRef )
    {
        return;
    }
    
    loginItems = LSSharedFileListCopySnapshot( loginItemsRef, &seedValue );
    
    for( loginItem in ( NSArray * )loginItems )
    {		
        loginItemRef = ( LSSharedFileListItemRef )loginItem;
        
        if( LSSharedFileListItemResolve( loginItemRef, 0, ( CFURLRef * )&path, NULL ) == noErr )
        {
            if( [ [ ( NSURL * )path path ] hasPrefix: [ [ NSBundle mainBundle ] bundlePath ] ] )
            {
                CFRelease( path );
                LSSharedFileListItemRemove( loginItemsRef, loginItemRef );
                
                break;
            }
            
            if( path != NULL )
            {
                CFRelease( path );
            }
        }		
    }
    
    if( loginItems != NULL )
    {
        CFRelease( loginItems );
    }
}

@end

@implementation PreferencesController

@synthesize loginCheckbox  = _loginCheckbox;
@synthesize userField      = _userField;
@synthesize activity       = _activity;

- ( id )init
{
    if( ( self = [ super initWithWindowNibName: @"Preferences" ] ) )
    {}
    
    return self;
}

- ( void )dealloc
{
    [ _loginCheckbox release ];
    
    [ super dealloc ];
}

- ( void )windowDidLoad
{
    [ super windowDidLoad ];
    
    _userField.delegate    = self;
    _userField.stringValue = [ NSString stringWithFormat: @"%@", [ [ NSUserDefaults standardUserDefaults ] objectForKey: @"User" ] ];
}

- ( IBAction )cancel: ( id )sender
{
    ( void )sender;
    
    [ self.window close ];
}

- ( IBAction )save: ( id )sender
{
    NSUserDefaults      * defaults;
    NetworkReachability * reachability;
    NSAlert             * alert;
    NSURLRequest        * request;
    NSURLResponse       * response;
    NSError             * error;
    NSData              * data;
    id                    json;
    
    ( void )sender;
    
    defaults = [ NSUserDefaults standardUserDefaults ];
    
    if( [ _loginCheckbox integerValue ] == 1 && [ self isLoginItemEnabled ] == NO )
    {
        [ self enableLoginItem ];
    }
    else if( [ _loginCheckbox integerValue ] == 0 && [ self isLoginItemEnabled ] == YES )
    {
        [ self disableLoginItem ];
    }
    
    if( [ [ _userField stringValue ] length ] == 0 )
    {
        alert = [ NSAlert alertWithMessageText: NSLocalizedString( @"NoUsernameTitle", nil ) defaultButton: NSLocalizedString( @"OK", nil ) alternateButton: nil otherButton: nil informativeTextWithFormat: NSLocalizedString( @"NoUsernameMessage", nil ), nil ];
        
        [ alert runModal ];
        
        return;
    }
    
    [ _activity setAlphaValue: ( CGFloat )1 ];
    [ _activity startAnimation: nil ];
    
    reachability = [ NetworkReachability networkReachabilityWithHostName: [ [ NSURL URLWithString: SO_URL_API ] host ] ];
    
    if( reachability.currentReachabilityStatus == NetworkStatusNotReachable )
    {
        alert = [ NSAlert alertWithMessageText: NSLocalizedString( @"NoConnectionTitle", nil ) defaultButton: NSLocalizedString( @"OK", nil ) alternateButton: nil otherButton: nil informativeTextWithFormat: NSLocalizedString( @"NoConnectionMessage", nil ), nil ];
        
        [ alert runModal ];
        [ _activity setAlphaValue: ( CGFloat )0 ];
        [ _activity stopAnimation: nil ];
        
        return;
    }
    
    response   = nil;
    request    = [ NSURLRequest requestWithURL: [ NSURL URLWithString: [ SO_URL_API stringByAppendingFormat: SO_URL_API_USERS, _userField.stringValue ] ] ];
    data       = [ NSURLConnection sendSynchronousRequest: request returningResponse: &response error: &error ];
    
    ( void )response;
    
    if( error != nil || data == nil )
    {
        alert = [ NSAlert alertWithMessageText: NSLocalizedString( @"ConnectionErrorTitle", nil ) defaultButton: NSLocalizedString( @"OK", nil ) alternateButton: nil otherButton: nil informativeTextWithFormat: NSLocalizedString( @"ConnectionErrorMessage", nil ), nil ];
        
        [ alert runModal ];
        [ _activity setAlphaValue: ( CGFloat )0 ];
        [ _activity stopAnimation: nil ];
        
        return;
    }
    
    json = [ NSJSONSerialization JSONObjectWithData: data options: NSJSONReadingMutableContainers error: NULL ];
    
    if( json == nil || [ [ json objectForKey: @"users" ] count ] != 1 )
    {
        alert = [ NSAlert alertWithMessageText: NSLocalizedString( @"InvalidUsernameTitle", nil ) defaultButton: NSLocalizedString( @"OK", nil ) alternateButton: nil otherButton: nil informativeTextWithFormat: NSLocalizedString( @"InvalidUsernameMessage", nil ), nil ];
        
        [ alert runModal ];
        [ _activity setAlphaValue: ( CGFloat )0 ];
        [ _activity stopAnimation: nil ];
        
        return;
    }
    
    [ _activity setAlphaValue: ( CGFloat )0 ];
    [ _activity stopAnimation: nil ];
    
    [ defaults setObject: [ NSNumber numberWithInteger: [ [ _userField stringValue ] integerValue ] ] forKey: @"User" ];
    [ defaults synchronize ];
    [ self.window close ];
    [ [ NSNotificationCenter defaultCenter ] postNotificationName: PreferencesChangedNotification object: nil ];
}

- ( IBAction )showWindow: ( id )sender
{
    [ _loginCheckbox  setIntegerValue: [ self isLoginItemEnabled ] ];
    [ _activity       setAlphaValue: ( CGFloat )0 ];
    
    [ super showWindow: sender ];
}

@end
